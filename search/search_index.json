{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PromptMigrate","text":"<p>Schema-like migration manager for LLM prompt collections</p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>PromptMigrate is a production-ready tool for managing LLM prompt collections with a migration system similar to database migrations. It allows developers to version, track, and evolve their prompts over time while maintaining backward compatibility.</p> <p>As LLM-powered applications mature, prompt engineering becomes increasingly important. PromptMigrate provides a structured way to manage prompt changes, track versions, and ensure consistency across your application.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Schema-based Migration System:    Track and version prompt changes over time, just like database migrations</p> </li> <li> <p>CLI Interface:   Manage migrations from the command line with intuitive commands</p> </li> <li> <p>Ergonomic Access:   Reference prompts as attributes or dictionary keys for cleaner code</p> </li> <li> <p>Case-insensitive Lookup:   Flexible access patterns for improved developer experience</p> </li> <li> <p>Dynamic Values:   Support for runtime variables like dates, random numbers, and text templates</p> </li> <li> <p>Python Integration:   Seamlessly integrate with your Python applications</p> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install promptmigrate\n</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<p>Define your prompt migrations:</p> <pre><code># promptmigrate_revisions/rev_001_initial.py\nfrom promptmigrate.manager import prompt_revision\n\n@prompt_revision(\"001_initial\", \"Initial prompts\")\ndef migrate(prompts):\n    prompts[\"SYSTEM\"] = \"You are a helpful assistant.\"\n    prompts[\"GREETING\"] = \"{{choice:Hello,Hi,Hey}}! How can I help you today?\"\n    prompts[\"DATE_AWARE\"] = \"Today is {{date:format=%B %d, %Y}}.\"\n    return prompts\n</code></pre> <p>Apply migrations:</p> <pre><code>promptmigrate upgrade\n</code></pre> <p>Use in your application:</p> <pre><code>from promptmigrate import promptmanager as pm\n\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-4o\",\n    messages=[\n        {\"role\": \"system\", \"content\": pm.SYSTEM},\n        {\"role\": \"assistant\", \"content\": pm.GREETING},\n        {\"role\": \"user\", \"content\": \"Tell me about PromptMigrate\"}\n    ]\n)\n</code></pre>"},{"location":"#why-promptmigrate","title":"Why PromptMigrate?","text":"<p>As LLM applications evolve:</p> <ol> <li>Prompts Change: Evolution of prompts is a standard part of LLM app development</li> <li>Version Control: Tracking changes helps understand application behavior</li> <li>Collaboration: Teams need a structured way to manage prompt engineering</li> <li>Testing: Versioned prompts enable better testing and validation</li> </ol> <p>PromptMigrate solves these challenges with a familiar migration-based approach.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started</li> <li>API Reference</li> <li>Working with Migrations</li> <li>Dynamic Values</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#promptmanager","title":"PromptManager","text":"<p>The core class that manages prompt loading, saving, and migrations.</p> <pre><code>from promptmigrate.manager import PromptManager\n</code></pre>"},{"location":"api/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, prompt_file: Path | None = None, state_file: Path | None = None):\n    ...\n</code></pre> <p>Parameters: - <code>prompt_file</code>: Optional path to the prompts YAML file (defaults to <code>Path(\"prompts.yaml\")</code>) - <code>state_file</code>: Optional path to the state JSON file (defaults to <code>Path(\".promptmigrate_state.json\")</code>)</p>"},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#reload","title":"reload","text":"<pre><code>def reload(self) -&gt; \"PromptManager\":\n    \"\"\"Reload prompts.yaml into the attribute cache and return self.\"\"\"\n</code></pre>"},{"location":"api/#load_prompts","title":"load_prompts","text":"<pre><code>def load_prompts(self) -&gt; dict[str, str]:\n    \"\"\"Load all prompts as a dictionary.\"\"\"\n</code></pre>"},{"location":"api/#save_prompts","title":"save_prompts","text":"<pre><code>def save_prompts(self, prompts: dict[str, str]) -&gt; None:\n    \"\"\"Save prompts to the YAML file.\"\"\"\n</code></pre>"},{"location":"api/#current_rev","title":"current_rev","text":"<pre><code>def current_rev(self) -&gt; str | None:\n    \"\"\"Get the current revision ID or None if no migrations applied.\"\"\"\n</code></pre>"},{"location":"api/#set_current_rev","title":"set_current_rev","text":"<pre><code>def set_current_rev(self, rev_id: str) -&gt; None:\n    \"\"\"Set the current revision ID.\"\"\"\n</code></pre>"},{"location":"api/#upgrade","title":"upgrade","text":"<pre><code>def upgrade(self, target: str | None = None) -&gt; None:\n    \"\"\"Apply pending migrations up to the target or all if target is None.\"\"\"\n</code></pre>"},{"location":"api/#list_migrations","title":"list_migrations","text":"<pre><code>def list_migrations(self) -&gt; list[PromptMigration]:\n    \"\"\"List all registered migrations, sorted by revision ID.\"\"\"\n</code></pre>"},{"location":"api/#process_dynamic_value","title":"process_dynamic_value","text":"<pre><code>def process_dynamic_value(self, prompt: str) -&gt; str:\n    \"\"\"\n    Process dynamic values in a prompt string.\n\n    This method finds and processes all dynamic value placeholders in the format\n    {% raw %}{{type:options}}{% endraw %} and replaces them with their computed values.\n    \"\"\"\n</code></pre>"},{"location":"api/#process_date_placeholder","title":"process_date_placeholder","text":"<pre><code>def process_date_placeholder(self, options_str: str) -&gt; str:\n    \"\"\"\n    Process a date placeholder with format option.\n\n    Format: {% raw %}{{date:format=%Y-%m-%d}}{% endraw %}\n    Returns the current date/time formatted according to the format string.\n    \"\"\"\n</code></pre>"},{"location":"api/#process_number_placeholder","title":"process_number_placeholder","text":"<pre><code>def process_number_placeholder(self, options_str: str) -&gt; str:\n    \"\"\"\n    Process a number placeholder with min/max options.\n\n    Format: {% raw %}{{number:min=1,max=100}}{% endraw %}\n    Returns a random integer between min and max (inclusive).\n    \"\"\"\n</code></pre>"},{"location":"api/#process_choice_placeholder","title":"process_choice_placeholder","text":"<pre><code>def process_choice_placeholder(self, options_str: str) -&gt; str:\n    \"\"\"\n    Process a choice placeholder with comma-separated options.\n\n    Format: {% raw %}{{choice:option1,option2,option3}}{% endraw %}\n    Returns a randomly selected option from the list.\n    \"\"\"\n</code></pre>"},{"location":"api/#process_text_placeholder","title":"process_text_placeholder","text":"<pre><code>def process_text_placeholder(self, options_str: str) -&gt; str:\n    \"\"\"\n    Process a text placeholder with a template and variables.\n\n    Format: {% raw %}{{text:template_string,var1=value1,var2=value2}}{% endraw %}\n    Returns the template with variables substituted.\n    \"\"\"\n</code></pre>"},{"location":"api/#attribute-and-dictionary-access","title":"Attribute and Dictionary Access","text":"<pre><code># Attribute access\nmanager.PROMPT_NAME\n\n# Dictionary access\nmanager[\"PROMPT_NAME\"]\n\n# Both lookups are case-insensitive\nmanager.prompt_name  # Works the same as manager.PROMPT_NAME\n</code></pre>"},{"location":"api/#prompt_revision-decorator","title":"prompt_revision Decorator","text":"<p>The decorator used to register migration functions.</p> <pre><code>from promptmigrate.manager import prompt_revision\n\n@prompt_revision(\"001_initial\", \"Initial migration\")\ndef migrate(prompts):\n    prompts[\"KEY\"] = \"Value\"\n    return prompts\n</code></pre> <p>Parameters: - <code>rev_id</code>: The unique revision ID (string) - <code>description</code>: A human-readable description of the migration</p>"},{"location":"api/#promptmigration-class","title":"PromptMigration Class","text":"<p>An internal class that represents a single migration.</p> <pre><code>class PromptMigration:\n    \"\"\"Represents a single prompt migration.\"\"\"\n\n    def __init__(self, rev_id: str, description: str, func: callable):\n        self.rev_id = rev_id\n        self.description = description\n        self.func = func\n</code></pre>"},{"location":"api/#cli-interface","title":"CLI Interface","text":"<p>The Command-Line Interface for PromptMigrate.</p>"},{"location":"api/#commands","title":"Commands","text":""},{"location":"api/#init","title":"init","text":"<p>Initialize a new PromptMigrate project.</p> <pre><code>promptmigrate init\n</code></pre>"},{"location":"api/#current","title":"current","text":"<p>Show the current revision.</p> <pre><code>promptmigrate current\n</code></pre>"},{"location":"api/#upgrade_1","title":"upgrade","text":"<p>Apply pending migrations.</p> <pre><code># Apply all pending migrations\npromptmigrate upgrade\n\n# Apply migrations up to a specific target\npromptmigrate upgrade --to 003_dynamic\n</code></pre>"},{"location":"api/#list","title":"list","text":"<p>List all available migrations and their status.</p> <pre><code>promptmigrate list\n</code></pre>"},{"location":"api/#global-instance","title":"Global Instance","text":"<p>For convenience, a global instance of <code>PromptManager</code> is provided:</p> <pre><code>from promptmigrate import promptmanager as pm\n\n# Use the global instance in your code\nsystem_prompt = pm.SYSTEM\n</code></pre> <p>This is the recommended way to access prompts in your application code.</p> <p>Represents a single migration operation.</p> <pre><code>@dataclass(slots=True, frozen=True)\nclass PromptMigration:\n    rev_id: str\n    description: str\n    created_at: datetime\n    fn: Callable[[dict[str, str]], dict[str, str]]\n\n    def apply(self, prompts: dict[str, str]) -&gt; dict[str, str]:\n        \"\"\"Apply the migration function to the prompts dict.\"\"\"\n</code></pre>"},{"location":"api/#global-promptmanager-instance","title":"Global promptmanager Instance","text":"<p>A pre-configured singleton instance of PromptManager is available for convenience:</p> <pre><code>from promptmigrate import promptmanager as pm\n\n# Access prompts\npm.SYSTEM\n</code></pre>"},{"location":"api/#cli-commands","title":"CLI Commands","text":""},{"location":"api/#init_1","title":"init","text":"<pre><code>promptmigrate init [--package PKG]\n</code></pre> <p>Initialize a new revisions package.</p>"},{"location":"api/#upgrade_2","title":"upgrade","text":"<pre><code>promptmigrate upgrade [--to TARGET] [--package PKG]\n</code></pre> <p>Apply pending migrations.</p>"},{"location":"api/#current_1","title":"current","text":"<pre><code>promptmigrate current\n</code></pre> <p>Show the current revision ID.</p>"},{"location":"api/#list_1","title":"list","text":"<pre><code>promptmigrate list\n</code></pre> <p>List all available migrations and their status (applied/pending).</p>"},{"location":"api/#dynamic-value-placeholders","title":"Dynamic Value Placeholders","text":"<p>PromptMigrate supports dynamic value placeholders that can be used in your prompts. These placeholders are processed at runtime when accessing prompts.</p>"},{"location":"api/#format","title":"Format","text":"<p>Dynamic values use the following format:</p> <pre><code>{% raw %}{{type:options}}{% endraw %}\n</code></pre> <p>Where: - <code>type</code>: The type of dynamic content (date, number, choice, text) - <code>options</code>: Configuration for the dynamic content, specific to each type</p>"},{"location":"api/#available-types","title":"Available Types","text":""},{"location":"api/#date","title":"Date","text":"<pre><code>{% raw %}{{date:format=%Y-%m-%d}}{% endraw %}\n</code></pre> <p>Options: - <code>format</code>: A strftime format string (default: \"%Y-%m-%d\")</p> <p>Example: <pre><code>{% raw %}Today is {{date:format=%B %d, %Y}}.{% endraw %}\n</code></pre></p>"},{"location":"api/#number","title":"Number","text":"<pre><code>{% raw %}{{number:min=1,max=100}}{% endraw %}\n</code></pre> <p>Options: - <code>min</code>: Minimum value (default: 0) - <code>max</code>: Maximum value (default: 100)</p> <p>Example: <pre><code>{% raw %}Your lucky number today is {{number:min=1,max=10}}.{% endraw %}\n</code></pre></p>"},{"location":"api/#choice","title":"Choice","text":"<pre><code>{% raw %}{{choice:option1,option2,option3}}{% endraw %}\n</code></pre> <p>Options: - A comma-separated list of options to choose from</p> <p>Example: <pre><code>{% raw %}I suggest trying {{choice:yoga,meditation,running}} today.{% endraw %}\n</code></pre></p>"},{"location":"api/#text","title":"Text","text":"<pre><code>{% raw %}{{text:Hello {name}!,name=World}}{% endraw %}\n</code></pre> <p>Options: - First part is the template with {variables} - Remaining parts are variable assignments in format key=value</p> <p>Example: <pre><code>{% raw %}{{text:Welcome to {city}, {name}!,city=New York,name=traveler}}{% endraw %}\n</code></pre></p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#040-2025-05-13","title":"[0.4.0] - 2025-05-13","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Auto-revision feature to detect and generate migrations from manual changes to prompts.yaml</li> <li>File watching capability to detect changes in real-time</li> <li>New CLI command <code>auto-revision</code> with <code>--dry-run</code> and <code>--description</code> options</li> <li>Environment variables <code>PROMPTMIGRATE_AUTO_REVISION</code> and <code>PROMPTMIGRATE_AUTO_REVISION_WATCH</code> for configuration</li> <li>Python API via <code>enable_auto_revision()</code> function</li> <li>Comprehensive documentation for the auto-revision feature</li> </ul>"},{"location":"changelog/#030-2025-05-13","title":"[0.3.0] - 2025-05-13","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Dynamic value placeholders for runtime variable substitution</li> <li>Date placeholders with custom formatting</li> <li>Random number generation with min/max values</li> <li>Random choice selection from provided options</li> <li>Text templates with variable substitution</li> <li>Added <code>list</code> command to CLI to show available migrations</li> <li>Added CI/CD pipeline via GitHub Actions for automated testing and release</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated documentation for production use</li> <li>Removed development artifacts and debug files</li> <li>Improved examples with latest API patterns</li> </ul>"},{"location":"changelog/#020-2025-05-01","title":"[0.2.0] - 2025-05-01","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Case-insensitive prompt lookup</li> <li>CLI command to show current migration state</li> <li>Support for Python 3.11 and 3.12</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Improved error handling for missing migrations</li> <li>Enhanced documentation with more examples</li> </ul>"},{"location":"changelog/#010-2025-04-15","title":"[0.1.0] - 2025-04-15","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Initial release</li> <li>Core migration functionality</li> <li>Command-line interface</li> <li>Basic prompt management with YAML storage</li> <li>Support for Python 3.9 and 3.10</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to PromptMigrate!</p> <p>This document provides guidelines and instructions for contributing to this project.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please read and follow our Code of Conduct.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please report it by creating a new issue on our GitHub repository.</p> <p>When reporting a bug, please include:</p> <ul> <li>A clear, descriptive title</li> <li>A detailed description of the issue</li> <li>Steps to reproduce the bug</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Your environment information (Python version, OS, etc.)</li> <li>Any relevant logs or error messages</li> </ul>"},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>We welcome suggestions for enhancements! Please create a new issue on our GitHub repository with the \"enhancement\" label.</p> <p>When suggesting an enhancement, please include:</p> <ul> <li>A clear, descriptive title</li> <li>A detailed description of the proposed enhancement</li> <li>Any relevant examples or use cases</li> <li>If applicable, potential implementation approaches</li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>We welcome pull requests for bug fixes, enhancements, or documentation improvements.</p> <p>To submit a pull request:</p> <ol> <li>Fork the repository</li> <li>Create a new branch for your changes</li> <li>Make your changes</li> <li>Run tests to ensure your changes don't break existing functionality</li> <li>Submit a pull request to the <code>main</code> branch</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Follow the existing code style</li> <li>Include tests for new functionality</li> <li>Update documentation as needed</li> <li>Keep pull requests focused on a single concern</li> <li>Write clear, descriptive commit messages</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>pip</li> </ul>"},{"location":"contributing/#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/promptmigrate/promptmigrate.git\ncd promptmigrate\n\n# Install in development mode with test dependencies\npip install -e \".[test,dev]\"\n</code></pre>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run tests\npytest\n\n# Run tests with coverage\npytest --cov=promptmigrate\n</code></pre>"},{"location":"contributing/#building-documentation","title":"Building Documentation","text":"<pre><code>pip install -e \".[docs]\"\nmkdocs serve\n</code></pre> <p>Then visit http://localhost:8000 to see the live documentation.</p>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Releases are managed by the core maintainers. The process includes:</p> <ol> <li>Updating the version in <code>pyproject.toml</code></li> <li>Updating the <code>CHANGELOG.md</code></li> <li>Creating a new GitHub release with appropriate tags</li> <li>Publishing to PyPI</li> </ol>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to PromptMigrate, you agree that your contributions will be licensed under the project's MIT License.</p>"},{"location":"development/","title":"Code Formatting","text":"<p>This project uses Black for code formatting to maintain a consistent code style across the codebase.</p>"},{"location":"development/#running-formatter-locally","title":"Running Formatter Locally","text":"<p>You can run the formatter locally before pushing your changes to avoid CI failures:</p>"},{"location":"development/#using-pre-commit-recommended","title":"Using pre-commit (recommended)","text":"<p>We've configured pre-commit hooks that will automatically format your code when you commit:</p> <pre><code># Install pre-commit (if not already installed)\npip install pre-commit\n\n# Install the git hooks\npre-commit install\n\n# Now Black will run automatically when you commit\n</code></pre>"},{"location":"development/#manual-formatting","title":"Manual formatting","text":"<p>If you prefer to run the formatter manually:</p> <pre><code># Using the provided script\npython scripts/format.py\n\n# Or directly with Black\nblack src tests\n</code></pre>"},{"location":"development/#windows-users","title":"Windows users","text":"<p>Windows users can run the PowerShell script:</p> <pre><code>.\\scripts\\format.ps1\n</code></pre>"},{"location":"development/#ci-pipeline","title":"CI Pipeline","text":"<p>Our CI pipeline includes a check that ensures all code is formatted according to Black's standards. If your build fails with messages like:</p> <pre><code>would reformat /path/to/file.py\n...\nError: Process completed with exit code 1.\n</code></pre> <p>Simply run the formatter locally and commit the changes before pushing again.</p>"},{"location":"dynamic_values/","title":"Dynamic Values","text":"<p>PromptMigrate supports dynamic value placeholders that are processed at runtime when accessing prompts. This allows for creating more flexible and context-aware prompts without hardcoding values.</p>"},{"location":"dynamic_values/#using-dynamic-values","title":"Using Dynamic Values","text":"<p>Dynamic values use the following format in your prompts:</p> <pre><code>{{type:options}}\n</code></pre> <p>Where: - <code>type</code>: The type of dynamic content (date, number, choice, text) - <code>options</code>: Configuration specific to each type</p>"},{"location":"dynamic_values/#available-placeholder-types","title":"Available Placeholder Types","text":""},{"location":"dynamic_values/#date-placeholders","title":"Date Placeholders","text":"<p>Date placeholders insert the current date/time formatted according to your specifications.</p> <p>Format: <pre><code>{{date:format=FORMAT_STRING}}\n</code></pre></p> <p>The format string follows Python's strftime format codes.</p> <p>Examples:</p> <pre><code># In your migration function\nprompts[\"DATE_EXAMPLE\"] = \"Today is {{date:format=%B %d, %Y}}.\"\nprompts[\"TIME_EXAMPLE\"] = \"The current time is {{date:format=%H:%M}}.\"\nprompts[\"FULL_TIMESTAMP\"] = \"Timestamp: {{date:format=%Y-%m-%d %H:%M:%S}}\"\n</code></pre> <p>These would resolve to something like:</p> <pre><code>\"Today is May 13, 2025.\"\n\"The current time is 14:30.\"\n\"Timestamp: 2025-05-13 14:30:45\"\n</code></pre>"},{"location":"dynamic_values/#number-placeholders","title":"Number Placeholders","text":"<p>Number placeholders generate random integers within a specified range.</p> <p>Format: <pre><code>{{number:min=MIN,max=MAX}}\n</code></pre></p> <p>Examples:</p> <pre><code># In your migration function\nprompts[\"DICE_ROLL\"] = \"You rolled a {{number:min=1,max=6}}!\"\nprompts[\"PERCENTAGE\"] = \"The system is {{number:min=0,max=100}}% complete.\"\nprompts[\"YEAR_FUTURE\"] = \"In the year {{number:min=2030,max=2050}}...\"\n</code></pre> <p>Each time these prompts are accessed, a new random number will be generated:</p> <pre><code>\"You rolled a 4!\"\n\"The system is 67% complete.\"\n\"In the year 2042...\"\n</code></pre>"},{"location":"dynamic_values/#choice-placeholders","title":"Choice Placeholders","text":"<p>Choice placeholders randomly select one option from a list of comma-separated values.</p> <p>Format: <pre><code>{{choice:option1,option2,option3,...}}\n</code></pre></p> <p>Examples:</p> <pre><code># In your migration function\nprompts[\"GREETING\"] = \"{{choice:Hello,Hi,Hey,Greetings}}! How can I help?\"\nprompts[\"MOOD\"] = \"I'm feeling {{choice:happy,excited,thoughtful,curious}} today.\"\nprompts[\"SUGGESTION\"] = \"Have you tried {{choice:yoga,meditation,journaling,walking}}?\"\n</code></pre> <p>Each access will randomly select one option:</p> <pre><code>\"Hello! How can I help?\"\n\"I'm feeling thoughtful today.\"\n\"Have you tried walking?\"\n</code></pre>"},{"location":"dynamic_values/#text-placeholders","title":"Text Placeholders","text":"<p>Text placeholders use Python's string formatting to insert variables into text templates.</p> <p>Format: <pre><code>{{text:template_string,var1=value1,var2=value2,...}}\n</code></pre></p> <p>Examples:</p> <pre><code># In your migration function\nprompts[\"WELCOME\"] = \"{{text:Welcome to {service}, {name}!,service=ChatBot,name=user}}\"\nprompts[\"INTRO\"] = \"{{text:I am a {type} assistant created by {company}.,type=friendly,company=YourCompany}}\"\nprompts[\"COMPLEX\"] = \"{{text:The {color} {animal} jumped over the {object}.,color=brown,animal=fox,object=fence}}\"\n</code></pre> <p>These would resolve to:</p> <pre><code>\"Welcome to ChatBot, user!\"\n\"I am a friendly assistant created by YourCompany.\"\n\"The brown fox jumped over the fence.\"\n</code></pre>"},{"location":"dynamic_values/#advanced-usage","title":"Advanced Usage","text":""},{"location":"dynamic_values/#combining-dynamic-values","title":"Combining Dynamic Values","text":"<p>You can use multiple dynamic values in a single prompt:</p> <pre><code>prompt = \"Today ({{date:format=%Y-%m-%d}}) your lucky number is {{number:min=1,max=100}}. Try {{choice:running,swimming,biking}} today!\"\n</code></pre>"},{"location":"dynamic_values/#using-dynamic-values-in-real-world-applications","title":"Using Dynamic Values in Real-World Applications","text":"<p>This feature is particularly useful for:</p> <ol> <li>Time-sensitive prompts: Incorporating current dates or time references</li> <li>Randomized responses: Creating variety in system responses</li> <li>Customizable templates: Creating reusable prompt templates with variables</li> </ol>"},{"location":"dynamic_values/#example-weather-app-with-dynamic-values","title":"Example: Weather App with Dynamic Values","text":"<pre><code>@prompt_revision(\"003_weather_dynamic\", \"Add dynamic weather prompts\")\ndef add_weather_prompts(prompts):\n    # Date-aware weather question\n    prompts[\"WEATHER_QUESTION\"] = \"What's the weather like on {{date:format=%A, %B %d}}?\"\n\n    # Randomized weather follow-up\n    prompts[\"WEATHER_FOLLOWUP\"] = \"{{choice:Would you like a detailed forecast?,Should I show the weekly outlook?,Do you want to know about precipitation chances?}}\"\n\n    # Location-aware greeting template\n    prompts[\"LOCATION_GREETING\"] = \"{{text:Welcome to the weather service for {location}!,location=your area}}\"\n\n    return prompts\n</code></pre> <p>Using these prompts in your application:</p> <pre><code>from promptmigrate import promptmanager as pm\n\n# Each time these are accessed, dynamic values are processed\nweather_q = pm.WEATHER_QUESTION      # \"What's the weather like on Wednesday, May 13?\"\nfollowup = pm.WEATHER_FOLLOWUP       # Random followup question\ngreeting = pm.LOCATION_GREETING      # \"Welcome to the weather service for your area!\"\n\n# You can override template variables at runtime\ncustom_location = pm.LOCATION_GREETING.replace(\"your area\", \"New York\")\n</code></pre>"},{"location":"migrations/","title":"Migration Guide","text":"<p>This guide explains best practices for creating and managing prompt migrations.</p>"},{"location":"migrations/#migration-naming","title":"Migration Naming","text":"<p>Use a consistent naming pattern for your revision IDs:</p> <pre><code>XXX_descriptive_name\n</code></pre> <p>Where <code>XXX</code> is a numeric prefix that ensures migrations are applied in the correct order.</p> <p>Examples: - <code>001_initial_system</code> - <code>002_add_weather_questions</code> - <code>010_refactor_system_prompt</code></p>"},{"location":"migrations/#writing-migration-functions","title":"Writing Migration Functions","text":"<p>Migrations should be pure functions that take a prompts dictionary and return a modified dictionary:</p> <pre><code>@prompt_revision(\"001_initial\", \"Add system prompt\")\ndef migrate(prompts):\n    # Add new prompts\n    prompts[\"SYSTEM\"] = \"You are a helpful assistant.\"\n\n    # Or modify existing ones (if you know they exist)\n    if \"USER_GREETING\" in prompts:\n        prompts[\"USER_GREETING\"] = \"Updated greeting\"\n\n    return prompts\n</code></pre>"},{"location":"migrations/#migration-best-practices","title":"Migration Best Practices","text":""},{"location":"migrations/#1-make-migrations-idempotent","title":"1. Make Migrations Idempotent","text":"<p>Migrations should be safe to run multiple times:</p> <pre><code>@prompt_revision(\"002_fix_typo\", \"Fix typo in system prompt\")\ndef fix_typo(prompts):\n    if \"SYSTEM\" in prompts and \"assisstant\" in prompts[\"SYSTEM\"]:\n        prompts[\"SYSTEM\"] = prompts[\"SYSTEM\"].replace(\"assisstant\", \"assistant\")\n    return prompts\n</code></pre>"},{"location":"migrations/#2-keep-migrations-small-and-focused","title":"2. Keep Migrations Small and Focused","text":"<p>Each migration should do one logical change:</p> <pre><code># Good: Focused on one type of prompt\n@prompt_revision(\"003_add_weather\", \"Add weather prompts\")\ndef add_weather(prompts):\n    prompts[\"WEATHER_QUESTION\"] = \"What's the weather like today?\"\n    prompts[\"WEATHER_FOLLOW_UP\"] = \"Would you like a detailed forecast?\"\n    return prompts\n\n# Instead of combining unrelated changes\n</code></pre>"},{"location":"migrations/#3-document-your-changes","title":"3. Document Your Changes","text":"<p>Add clear descriptions to your migrations:</p> <pre><code>@prompt_revision(\n    \"004_format_change\",\n    \"Changed format of response prompts to include variable placeholders\"\n)\ndef update_format(prompts):\n    # Implementation\n    return prompts\n</code></pre>"},{"location":"migrations/#4-testing-migrations","title":"4. Testing Migrations","text":"<p>Test your migrations to ensure they work as expected:</p> <pre><code># test_migrations.py\nfrom promptmigrate.manager import PromptManager, prompt_revision\n\ndef test_migration():\n    # Create a test migration\n    @prompt_revision(\"test_001\", \"Test migration\")\n    def test_migrate(prompts):\n        prompts[\"TEST\"] = \"Test value\"\n        return prompts\n\n    # Apply it to an empty prompts dict\n    manager = PromptManager(prompt_file=Path(\"test_prompts.yaml\"))\n    manager.upgrade()\n\n    # Verify it worked\n    assert manager.TEST == \"Test value\"\n</code></pre>"},{"location":"migrations/#organizing-migrations","title":"Organizing Migrations","text":""},{"location":"migrations/#option-1-chronological-files","title":"Option 1: Chronological Files","text":"<pre><code>promptmigrate_revisions/\n  \u251c\u2500\u2500 __init__.py\n  \u251c\u2500\u2500 rev_001_initial.py\n  \u251c\u2500\u2500 rev_002_add_weather.py\n  \u2514\u2500\u2500 rev_003_refactor.py\n</code></pre>"},{"location":"migrations/#option-2-module-based-organization","title":"Option 2: Module-Based Organization","text":"<pre><code>myapp/\n  \u251c\u2500\u2500 __init__.py\n  \u2514\u2500\u2500 prompts/\n      \u251c\u2500\u2500 __init__.py\n      \u2514\u2500\u2500 revisions/\n          \u251c\u2500\u2500 __init__.py\n          \u251c\u2500\u2500 core.py  # Core prompts\n          \u251c\u2500\u2500 weather.py  # Weather-related prompts\n          \u2514\u2500\u2500 user.py  # User interaction prompts\n</code></pre> <p>With module loading in your application:</p> <pre><code># Load all revision modules\nimport importlib\nimport pkgutil\n\npkg = \"myapp.prompts.revisions\"\npkg_mod = importlib.import_module(pkg)\n\nfor _, name, _ in pkgutil.walk_packages(pkg_mod.__path__, f\"{pkg_mod.__name__}.\"):\n    importlib.import_module(name)\n</code></pre>"},{"location":"migrations/#advanced-migration-patterns","title":"Advanced Migration Patterns","text":""},{"location":"migrations/#1-conditional-migrations","title":"1. Conditional Migrations","text":"<p>Apply changes only if certain conditions are met:</p> <pre><code>@prompt_revision(\"005_conditional\", \"Update prompts based on condition\")\ndef conditional(prompts):\n    # Only update if we have the old format\n    if \"SYSTEM\" in prompts and not prompts[\"SYSTEM\"].startswith(\"You are\"):\n        prompts[\"SYSTEM\"] = \"You are \" + prompts[\"SYSTEM\"]\n    return prompts\n</code></pre>"},{"location":"migrations/#2-renaming-prompts","title":"2. Renaming Prompts","text":"<p>When renaming prompts, create a migration that handles both keys:</p> <pre><code>@prompt_revision(\"006_rename\", \"Rename GREETING to WELCOME\")\ndef rename_greeting(prompts):\n    if \"GREETING\" in prompts:\n        prompts[\"WELCOME\"] = prompts[\"GREETING\"]\n        del prompts[\"GREETING\"]\n    return prompts\n</code></pre>"},{"location":"migrations/#3-marking-prompts-as-deprecated","title":"3. Marking Prompts as Deprecated","text":"<p>Instead of removing prompts, mark them as deprecated:</p> <pre><code>@prompt_revision(\"007_deprecate\", \"Mark old prompts as deprecated\")\ndef deprecate_prompts(prompts):\n    if \"OLD_PROMPT\" in prompts:\n        prompts[\"OLD_PROMPT_DEPRECATED\"] = prompts[\"OLD_PROMPT\"]\n        prompts[\"OLD_PROMPT\"] = \"[DEPRECATED] Please use NEW_PROMPT instead. \" + prompts[\"OLD_PROMPT\"]\n    return prompts\n</code></pre>"},{"location":"migrations/#auto-generated-migrations","title":"Auto-Generated Migrations","text":"<p>PromptMigrate supports automatically creating migrations from manual changes to your <code>prompts.yaml</code> file.</p>"},{"location":"migrations/#using-the-auto-revision-command","title":"Using the Auto-Revision Command","text":"<pre><code># Detect changes and create a revision\npromptmigrate auto-revision\n</code></pre> <p>The system will automatically: 1. Compare the current prompts.yaml with the state after the last applied migration 2. Identify added, modified, and removed prompts 3. Generate a new migration file with appropriate code 4. Register the migration so it can be applied with <code>promptmigrate upgrade</code></p>"},{"location":"migrations/#example-auto-generated-migration","title":"Example Auto-Generated Migration","text":"<p>Here's an example of what an auto-generated migration might look like:</p> <pre><code>\"\"\"Auto-generated migration from manual changes to prompts.yaml on 2025-05-13 14:22:45.\"\"\"\n\nfrom promptmigrate.manager import prompt_revision\n\n\n@prompt_revision(\"005_auto_changes\", \"Auto-generated from manual changes to prompts.yaml\")\ndef migrate(prompts):\n    \"\"\"Apply changes made directly to prompts.yaml.\"\"\"\n    # Add new prompts\n    prompts[\"NEW_PROMPT\"] = \"This is a new prompt added manually\"\n\n    # Update modified prompts\n    prompts[\"SYSTEM\"] = \"Updated system prompt with better instructions\"\n\n    # Remove deleted prompts\n    if \"OLD_PROMPT\" in prompts:\n        del prompts[\"OLD_PROMPT\"]\n\n    return prompts\n</code></pre>"},{"location":"migrations/#best-practices-for-auto-revision","title":"Best Practices for Auto-Revision","text":"<ol> <li>Review Before Upgrading: Always review auto-generated migrations before applying them</li> <li>Update Descriptions: Consider editing the auto-generated description to be more specific</li> <li>Combine with Manual Edits: You can modify auto-generated migrations to improve them</li> <li>Add Tests: Consider adding tests for important prompt changes</li> </ol>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#installation","title":"Installation","text":"<p>Install from PyPI:</p> <pre><code>pip install promptmigrate\n</code></pre> <p>Or install from source:</p> <pre><code>git clone https://github.com/promptmigrate/promptmigrate.git\ncd promptmigrate\npip install -e .\n</code></pre>"},{"location":"usage/#basic-concepts","title":"Basic Concepts","text":"<p>PromptMigrate manages your LLM prompts using a migration system similar to database migrations. Key concepts:</p> <ol> <li>Prompts: Stored in a YAML file (<code>prompts.yaml</code>)</li> <li>Migrations: Python functions that transform prompts</li> <li>Revisions: Uniquely identified migrations with an ID and description</li> </ol>"},{"location":"usage/#getting-started","title":"Getting Started","text":""},{"location":"usage/#initialize-your-project","title":"Initialize Your Project","text":"<pre><code># Create the initial revisions package\npromptmigrate init\n</code></pre> <p>This creates a <code>promptmigrate_revisions</code> package where you can store your migrations.</p>"},{"location":"usage/#create-migrations","title":"Create Migrations","text":"<p>Create Python files in the revisions package:</p> <pre><code># promptmigrate_revisions/rev_001_initial.py\nfrom promptmigrate.manager import prompt_revision\n\n@prompt_revision(\"001_initial\", \"seed system prompt\")\ndef migrate(prompts):\n    prompts[\"SYSTEM\"] = \"You are a helpful assistant.\"\n    return prompts\n</code></pre>"},{"location":"usage/#apply-migrations","title":"Apply Migrations","text":"<pre><code>promptmigrate upgrade\n</code></pre>"},{"location":"usage/#check-current-revision","title":"Check Current Revision","text":"<pre><code>promptmigrate current\n</code></pre>"},{"location":"usage/#list-available-migrations","title":"List Available Migrations","text":"<pre><code>promptmigrate list\n</code></pre>"},{"location":"usage/#using-prompts-in-your-code","title":"Using Prompts in Your Code","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<pre><code>from promptmigrate import promptmanager as pm\n\n# Use attribute access\nsystem_prompt = pm.SYSTEM\n\n# Or dictionary access\nsystem_prompt = pm[\"SYSTEM\"]\n</code></pre>"},{"location":"usage/#with-openai","title":"With OpenAI","text":"<pre><code>import openai\nfrom promptmigrate import promptmanager as pm\n\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-4o\",\n    messages=[\n        {\"role\": \"system\", \"content\": pm.SYSTEM},\n        {\"role\": \"user\", \"content\": \"Hello, how are you?\"}\n    ]\n)\n</code></pre>"},{"location":"usage/#with-anthropic","title":"With Anthropic","text":"<pre><code>import anthropic\nfrom promptmigrate import promptmanager as pm\n\nclient = anthropic.Anthropic()\nmessage = client.messages.create(\n    model=\"claude-3-opus-20240229\",\n    system=pm.SYSTEM,\n    messages=[\n        {\"role\": \"user\", \"content\": \"Hello, how are you?\"}\n    ]\n)\n</code></pre>"},{"location":"usage/#dynamic-values","title":"Dynamic Values","text":"<p>PromptMigrate supports dynamic values that are processed at runtime when accessing prompts.</p>"},{"location":"usage/#using-dynamic-values-in-migrations","title":"Using Dynamic Values in Migrations","text":"<pre><code>from promptmigrate.manager import prompt_revision\n\n@prompt_revision(\"003_dynamic\", \"Add prompts with dynamic values\")\ndef add_dynamic_prompts(prompts):\n    # Date values with formatted output\n    prompts[\"DATE_PROMPT\"] = \"Today is {{date:format=%B %d, %Y}}.\"\n\n    # Random number between specific ranges\n    prompts[\"NUMBER_PROMPT\"] = \"Your lucky number is {{number:min=1,max=100}}.\"\n\n    # Random selection from choices\n    prompts[\"CHOICE_PROMPT\"] = \"Try {{choice:yoga,meditation,running,swimming}} today.\"\n\n    # Text template with variables\n    prompts[\"TEXT_PROMPT\"] = \"{{text:Hello {name}, welcome to {city}!,name=traveler,city=our platform}}\"\n\n    return prompts\n</code></pre>"},{"location":"usage/#available-dynamic-value-types","title":"Available Dynamic Value Types","text":""},{"location":"usage/#date-values","title":"Date Values","text":"<pre><code># Format the current date (uses standard strftime format)\n\"Today is {{date:format=%Y-%m-%d}}.\"  # Today is 2025-05-13.\n\"Current month: {{date:format=%B}}\"  # Current month: May\n</code></pre>"},{"location":"usage/#random-numbers","title":"Random Numbers","text":"<pre><code># Generate random integers between min and max (inclusive)\n\"Roll the dice: {{number:min=1,max=6}}\"\n\"Percentage: {{number:min=0,max=100}}%\"\n</code></pre>"},{"location":"usage/#random-choices","title":"Random Choices","text":"<pre><code># Randomly select one option from a comma-separated list\n\"Mood today: {{choice:happy,sad,excited,calm}}\"\n\"Color: {{choice:red,green,blue,yellow,purple}}\"\n</code></pre>"},{"location":"usage/#text-templates","title":"Text Templates","text":"<pre><code># Format text with variables (first part is template, followed by key=value pairs)\n\"{{text:Hello {name}!,name=World}}\"\n\"{{text:{greeting} {name}, welcome to {place}!,greeting=Hello,name=User,place=our app}}\"\n</code></pre>"},{"location":"usage/#example-usage","title":"Example Usage","text":"<pre><code>from promptmigrate import promptmanager as pm\n\n# Access a prompt with dynamic values - it gets processed on each access\ngreeting = pm.TEXT_PROMPT  # \"Hello traveler, welcome to our platform!\"\n\n# Each access to a prompt with random values may return different results\nfor _ in range(3):\n    print(pm.NUMBER_PROMPT)  # Different random number each time\n</code></pre>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/#custom-revisions-package","title":"Custom Revisions Package","text":"<pre><code>promptmigrate init --package myapp.prompts.revisions\npromptmigrate upgrade --package myapp.prompts.revisions\n</code></pre>"},{"location":"usage/#auto-create-revisions-from-manual-changes","title":"Auto-Create Revisions from Manual Changes","text":"<p>PromptMigrate can automatically create revisions from manual changes to your <code>prompts.yaml</code> file. This allows non-technical team members to edit prompts directly and have those changes properly tracked in your migration history.</p>"},{"location":"usage/#using-the-cli","title":"Using the CLI","text":"<pre><code># Detect changes and create a revision\npromptmigrate auto-revision\n\n# Preview changes without creating a revision\npromptmigrate auto-revision --dry-run\n\n# Create with custom description\npromptmigrate auto-revision --description \"Updated marketing prompts\"\n</code></pre>"},{"location":"usage/#enabling-auto-revision-in-python","title":"Enabling Auto-Revision in Python","text":"<pre><code>from promptmigrate import enable_auto_revision\n\n# Basic auto-revision\nenable_auto_revision()\n\n# With automatic file watching (detects changes in real-time)\nenable_auto_revision(watch=True)\n</code></pre>"},{"location":"usage/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>from promptmigrate.autorevision import detect_changes, create_revision_from_changes\n\n# Detect what has changed\nadded, modified, removed = detect_changes()\n\n# Create a revision based on those changes\nrevision_file = create_revision_from_changes(\n    description=\"My custom revision from manual changes\"\n)\n</code></pre>"},{"location":"usage/#runtime-migrations","title":"Runtime Migrations","text":"<pre><code>from promptmigrate.manager import prompt_revision, PromptManager\n\n@prompt_revision(\"003_custom\", \"Add a custom prompt\")\ndef add_custom_prompt(prompts):\n    prompts[\"CUSTOM\"] = \"This is a custom prompt added at runtime.\"\n    return prompts\n\n# Apply migrations\nmanager = PromptManager()\nmanager.upgrade()\n</code></pre>"},{"location":"usage/#custom-prompt-and-state-files","title":"Custom Prompt and State Files","text":"<pre><code>from pathlib import Path\nfrom promptmigrate.manager import PromptManager\n\n# Use custom file locations\nmanager = PromptManager(\n    prompt_file=Path(\"/path/to/custom_prompts.yaml\"),\n    state_file=Path(\"/path/to/.custom_state.json\")\n)\n</code></pre>"}]}